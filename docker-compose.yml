version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: codewithdell_postgres
    environment:
      POSTGRES_DB: codewithdell
      POSTGRES_USER: codewithdell
      POSTGRES_PASSWORD: codewithdell123
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - codewithdell_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U codewithdell"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: codewithdell_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - codewithdell_network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Golang Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: codewithdell_backend
    ports:
      - "8080:8080"
    environment:
      - GIN_MODE=debug
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=codewithdell
      - DB_USER=codewithdell
      - DB_PASSWORD=codewithdell123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - CORS_ORIGIN=http://localhost:3000
    volumes:
      - ./backend:/app
      - go_modules:/go/pkg/mod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - codewithdell_network
    restart: unless-stopped

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: codewithdell_frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=your-nextauth-secret-change-in-production
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - codewithdell_network
    restart: unless-stopped

  # Nginx Reverse Proxy (Production-like)
  nginx:
    image: nginx:alpine
    container_name: codewithdell_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - frontend
      - backend
    networks:
      - codewithdell_network
    profiles:
      - production

  # pgAdmin4 (Database GUI)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: codewithdell_pgadmin
    ports:
      - "8081:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@codewithdell.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - codewithdell_network
    profiles:
      - tools

  # Adminer (Database GUI) - Alternative
  adminer:
    image: adminer:latest
    container_name: codewithdell_adminer
    ports:
      - "8082:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - codewithdell_network
    profiles:
      - tools

  # Redis Commander (Redis GUI)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: codewithdell_redis_commander
    ports:
      - "8083:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    networks:
      - codewithdell_network
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  go_modules:
    driver: local
  pgadmin_data:
    driver: local

networks:
  codewithdell_network:
    driver: bridge 